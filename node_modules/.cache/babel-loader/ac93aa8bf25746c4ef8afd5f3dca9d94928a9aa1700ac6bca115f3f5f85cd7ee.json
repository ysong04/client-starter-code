{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/adria/Documents/github/client-starter-code/src/components/containers/AllCampusesContainer.js\";\n/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteCampusThunk, fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { Button } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        handleDelete: this.props.deleteCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"names":["Header","Component","PropTypes","connect","deleteCampusThunk","fetchAllCampusesThunk","AllCampusesView","Button","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","render","allCampuses","deleteCampus","mapState","state","mapDispatch","dispatch","campusId","propTypes","array","isRequired","func"],"sources":["/mnt/c/Users/adria/Documents/github/client-starter-code/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteCampusThunk, fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { Button } from '@material-ui/core';\n\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <AllCampusesView\n          allCampuses={this.props.allCampuses}\n          handleDelete={this.props.deleteCampus}\n        />\n      </div>\n    );\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n  return {\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,iBAAiB,EAAEC,qBAAqB,QAAQ,oBAAoB;AAC7E,SAASC,eAAe,QAAQ,UAAU;AAC1C,SAASC,MAAM,QAAQ,mBAAmB;AAAC;AAE3C,MAAMC,oBAAoB,SAASP,SAAS,CAAC;EAC3C;EACAQ,iBAAiB,GAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACvB,IAAI,CAACA,KAAK,CAACC,gBAAgB,EAAE;EAC/B;;EAEA;EACAC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,eAAe;QACd,WAAW,EAAE,IAAI,CAACF,KAAK,CAACG,WAAY;QACpC,YAAY,EAAE,IAAI,CAACH,KAAK,CAACI;MAAa;QAAA;QAAA;QAAA;MAAA,QACtC;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMI,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLP,gBAAgB,EAAE,MAAMO,QAAQ,CAACf,qBAAqB,EAAE,CAAC;IACzDW,YAAY,EAAGK,QAAQ,IAAKD,QAAQ,CAAChB,iBAAiB,CAACiB,QAAQ,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACAb,oBAAoB,CAACc,SAAS,GAAG;EAC/BP,WAAW,EAAEb,SAAS,CAACqB,KAAK,CAACC,UAAU;EACvCX,gBAAgB,EAAEX,SAAS,CAACuB,IAAI,CAACD;AACnC,CAAC;;AAED;AACA;AACA;AACA,eAAerB,OAAO,CAACc,QAAQ,EAAEE,WAAW,CAAC,CAACX,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}