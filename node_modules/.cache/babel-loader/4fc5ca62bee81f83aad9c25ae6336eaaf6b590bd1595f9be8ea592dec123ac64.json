{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/adria/Documents/github/client-starter-code/src/components/containers/NewCampusContainer.js\";\nimport React from 'react';\nimport Header from './Header';\nimport NewCampusView from '../views/NewCampusView';\nimport { Redirect } from 'react-router-dom';\nimport { addCampusThunk } from '../../store/thunks';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewCampusContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(this.state);\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl\n      };\n\n      // Add new student in back-end database\n      let newCampus = await this.props.addCampus(campus);\n      console.log(newCampus);\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        name: \"\",\n        address: \"\",\n        campusId: null,\n        redirect: true,\n        imageUrl: \"\",\n        redirectId: newCampus.id\n      });\n    };\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"names":["React","Header","NewCampusView","Redirect","addCampusThunk","connect","NewCampusContainer","Component","constructor","props","handleChange","event","setState","target","name","value","console","log","state","handleSubmit","preventDefault","campus","address","description","imageUrl","newCampus","addCampus","campusId","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["/mnt/c/Users/adria/Documents/github/client-starter-code/src/components/containers/NewCampusContainer.js"],"sourcesContent":["import React from 'react'\r\nimport Header from './Header';\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { addCampusThunk } from '../../store/thunks';\r\nimport { connect } from 'react-redux';\r\n\r\nclass NewCampusContainer extends React.Component {\r\n   \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          name: \"\", \r\n          address: \"\", \r\n          description: \"\",\r\n          imageUrl: \"\",\r\n          redirect: false, \r\n          redirectId: null\r\n        };\r\n      }\r\n    \r\n      // Capture input data when it is entered\r\n      handleChange = event => {\r\n        this.setState({\r\n          [event.target.name]: event.target.value\r\n        });\r\n        console.log(this.state)\r\n      }\r\n    \r\n      // Take action after user click the submit button\r\n      handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n        let campus = {\r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            description: this.state.description,\r\n            imageUrl: this.state.imageUrl\r\n        };\r\n        \r\n        // Add new student in back-end database\r\n        let newCampus = await this.props.addCampus(campus);\r\n        console.log(newCampus)\r\n        // Update state, and trigger redirect to show the new student\r\n        this.setState({\r\n          name: \"\", \r\n          address: \"\", \r\n          campusId: null, \r\n          redirect: true,\r\n          imageUrl: \"\", \r\n          redirectId: newCampus.id\r\n        });\r\n      }\r\n    \r\n      // Unmount when the component is being removed from the DOM:\r\n      componentWillUnmount() {\r\n          this.setState({redirect: false, redirectId: null});\r\n      }\r\n    \r\n      // Render new student input form\r\n      render() {\r\n        // Redirect to new student's page after submit\r\n        if(this.state.redirect) {\r\n          return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n        }\r\n    \r\n        // Display the input form via the corresponding View component\r\n        return (\r\n          <div>\r\n            <Header />\r\n            <NewCampusView \r\n              handleChange = {this.handleChange} \r\n              handleSubmit={this.handleSubmit}      \r\n            />\r\n          </div>          \r\n        );\r\n      }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,aAAa,MAAM,wBAAwB;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,OAAO,QAAQ,aAAa;AAAC;AAEtC,MAAMC,kBAAkB,SAASN,KAAK,CAACO,SAAS,CAAC;EAE7CC,WAAW,CAACC,KAAK,EAAC;IACd,KAAK,CAACA,KAAK,CAAC;IAAC,KAYfC,YAAY,GAAGC,KAAK,IAAI;MACtB,IAAI,CAACC,QAAQ,CAAC;QACZ,CAACD,KAAK,CAACE,MAAM,CAACC,IAAI,GAAGH,KAAK,CAACE,MAAM,CAACE;MACpC,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACzB,CAAC;IAAA,KAGDC,YAAY,GAAG,MAAMR,KAAK,IAAI;MAC5BA,KAAK,CAACS,cAAc,EAAE,CAAC,CAAE;;MAEzB,IAAIC,MAAM,GAAG;QACTP,IAAI,EAAE,IAAI,CAACI,KAAK,CAACJ,IAAI;QACrBQ,OAAO,EAAE,IAAI,CAACJ,KAAK,CAACI,OAAO;QAC3BC,WAAW,EAAE,IAAI,CAACL,KAAK,CAACK,WAAW;QACnCC,QAAQ,EAAE,IAAI,CAACN,KAAK,CAACM;MACzB,CAAC;;MAED;MACA,IAAIC,SAAS,GAAG,MAAM,IAAI,CAAChB,KAAK,CAACiB,SAAS,CAACL,MAAM,CAAC;MAClDL,OAAO,CAACC,GAAG,CAACQ,SAAS,CAAC;MACtB;MACA,IAAI,CAACb,QAAQ,CAAC;QACZE,IAAI,EAAE,EAAE;QACRQ,OAAO,EAAE,EAAE;QACXK,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdJ,QAAQ,EAAE,EAAE;QACZK,UAAU,EAAEJ,SAAS,CAACK;MACxB,CAAC,CAAC;IACJ,CAAC;IAzCC,IAAI,CAACZ,KAAK,GAAG;MACXJ,IAAI,EAAE,EAAE;MACRQ,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MACZI,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC;EACH;;EAEA;;EAiCA;EACAE,oBAAoB,GAAG;IACnB,IAAI,CAACnB,QAAQ,CAAC;MAACgB,QAAQ,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAI,CAAC,CAAC;EACtD;;EAEA;EACAG,MAAM,GAAG;IACP;IACA,IAAG,IAAI,CAACd,KAAK,CAACU,QAAQ,EAAE;MACtB,oBAAQ,QAAC,QAAQ;QAAC,EAAE,EAAG,WAAU,IAAI,CAACV,KAAK,CAACW,UAAW;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE;IAC7D;;IAEA;IACA,oBACE;MAAA,wBACE,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,aAAa;QACZ,YAAY,EAAI,IAAI,CAACnB,YAAa;QAClC,YAAY,EAAE,IAAI,CAACS;MAAa;QAAA;QAAA;QAAA;MAAA,QAChC;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;AACN;;AAEA;AACA;AACA;AACA,MAAMc,WAAW,GAAIC,QAAQ,IAAK;EAC9B,OAAO;IACHR,SAAS,EAAGL,MAAM,IAAKa,QAAQ,CAAC9B,cAAc,CAACiB,MAAM,CAAC;EAC1D,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA,eAAehB,OAAO,CAAC,IAAI,EAAE4B,WAAW,CAAC,CAAC3B,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}